#ifndef _ALTERA_HPS_0_H_
#define _ALTERA_HPS_0_H_

/*
 * This file was automatically generated by the swinfo2header utility.
 * 
 * Created from SOPC Builder system 'soc_system' in
 * file '/cygdrive/e/Sorry/DE0-nano-SoC-my_first_hps-fpga_base-20210330T142641Z-001/DE0-my_first_hps-fpga_base/soc_system.sopcinfo'.
 */

/*
 * This file contains macros for module 'hps_0' and devices
 * connected to the following masters:
 *   h2f_axi_master
 *   h2f_lw_axi_master
 * 
 * Do not include this header file and another header file created for a
 * different module or master group at the same time.
 * Doing so may result in duplicate macro names.
 * Instead, use the system header file which has macros with unique names.
 */

/*
 * Macros for device 'onchip_memory2_0', class 'altera_avalon_onchip_memory2'
 * The macros are prefixed with 'ONCHIP_MEMORY2_0_'.
 * The prefix is the slave descriptor.
 */
#define ONCHIP_MEMORY2_0_COMPONENT_TYPE altera_avalon_onchip_memory2
#define ONCHIP_MEMORY2_0_COMPONENT_NAME onchip_memory2_0
#define ONCHIP_MEMORY2_0_BASE 0x0
#define ONCHIP_MEMORY2_0_SPAN 65536
#define ONCHIP_MEMORY2_0_END 0xffff
#define ONCHIP_MEMORY2_0_ALLOW_IN_SYSTEM_MEMORY_CONTENT_EDITOR 0
#define ONCHIP_MEMORY2_0_ALLOW_MRAM_SIM_CONTENTS_ONLY_FILE 0
#define ONCHIP_MEMORY2_0_CONTENTS_INFO ""
#define ONCHIP_MEMORY2_0_DUAL_PORT 0
#define ONCHIP_MEMORY2_0_GUI_RAM_BLOCK_TYPE AUTO
#define ONCHIP_MEMORY2_0_INIT_CONTENTS_FILE soc_system_onchip_memory2_0
#define ONCHIP_MEMORY2_0_INIT_MEM_CONTENT 1
#define ONCHIP_MEMORY2_0_INSTANCE_ID NONE
#define ONCHIP_MEMORY2_0_NON_DEFAULT_INIT_FILE_ENABLED 0
#define ONCHIP_MEMORY2_0_RAM_BLOCK_TYPE AUTO
#define ONCHIP_MEMORY2_0_READ_DURING_WRITE_MODE DONT_CARE
#define ONCHIP_MEMORY2_0_SINGLE_CLOCK_OP 0
#define ONCHIP_MEMORY2_0_SIZE_MULTIPLE 1
#define ONCHIP_MEMORY2_0_SIZE_VALUE 65536
#define ONCHIP_MEMORY2_0_WRITABLE 1
#define ONCHIP_MEMORY2_0_MEMORY_INFO_DAT_SYM_INSTALL_DIR SIM_DIR
#define ONCHIP_MEMORY2_0_MEMORY_INFO_GENERATE_DAT_SYM 1
#define ONCHIP_MEMORY2_0_MEMORY_INFO_GENERATE_HEX 1
#define ONCHIP_MEMORY2_0_MEMORY_INFO_HAS_BYTE_LANE 0
#define ONCHIP_MEMORY2_0_MEMORY_INFO_HEX_INSTALL_DIR QPF_DIR
#define ONCHIP_MEMORY2_0_MEMORY_INFO_MEM_INIT_DATA_WIDTH 64
#define ONCHIP_MEMORY2_0_MEMORY_INFO_MEM_INIT_FILENAME soc_system_onchip_memory2_0

/*
 * Macros for device 'StepEnable', class 'altera_avalon_pio'
 * The macros are prefixed with 'STEPENABLE_'.
 * The prefix is the slave descriptor.
 */
#define STEPENABLE_COMPONENT_TYPE altera_avalon_pio
#define STEPENABLE_COMPONENT_NAME StepEnable
#define STEPENABLE_BASE 0x0
#define STEPENABLE_SPAN 16
#define STEPENABLE_END 0xf
#define STEPENABLE_BIT_CLEARING_EDGE_REGISTER 0
#define STEPENABLE_BIT_MODIFYING_OUTPUT_REGISTER 0
#define STEPENABLE_CAPTURE 0
#define STEPENABLE_DATA_WIDTH 1
#define STEPENABLE_DO_TEST_BENCH_WIRING 0
#define STEPENABLE_DRIVEN_SIM_VALUE 0
#define STEPENABLE_EDGE_TYPE NONE
#define STEPENABLE_FREQ 50000000
#define STEPENABLE_HAS_IN 1
#define STEPENABLE_HAS_OUT 0
#define STEPENABLE_HAS_TRI 0
#define STEPENABLE_IRQ_TYPE NONE
#define STEPENABLE_RESET_VALUE 0

/*
 * Macros for device 'Direction', class 'altera_avalon_pio'
 * The macros are prefixed with 'DIRECTION_'.
 * The prefix is the slave descriptor.
 */
#define DIRECTION_COMPONENT_TYPE altera_avalon_pio
#define DIRECTION_COMPONENT_NAME Direction
#define DIRECTION_BASE 0x10
#define DIRECTION_SPAN 16
#define DIRECTION_END 0x1f
#define DIRECTION_BIT_CLEARING_EDGE_REGISTER 0
#define DIRECTION_BIT_MODIFYING_OUTPUT_REGISTER 0
#define DIRECTION_CAPTURE 0
#define DIRECTION_DATA_WIDTH 1
#define DIRECTION_DO_TEST_BENCH_WIRING 0
#define DIRECTION_DRIVEN_SIM_VALUE 0
#define DIRECTION_EDGE_TYPE NONE
#define DIRECTION_FREQ 50000000
#define DIRECTION_HAS_IN 1
#define DIRECTION_HAS_OUT 0
#define DIRECTION_HAS_TRI 0
#define DIRECTION_IRQ_TYPE NONE
#define DIRECTION_RESET_VALUE 0

/*
 * Macros for device 'Reset', class 'altera_avalon_pio'
 * The macros are prefixed with 'RESET_'.
 * The prefix is the slave descriptor.
 */
#define RESET_COMPONENT_TYPE altera_avalon_pio
#define RESET_COMPONENT_NAME Reset
#define RESET_BASE 0x20
#define RESET_SPAN 16
#define RESET_END 0x2f
#define RESET_BIT_CLEARING_EDGE_REGISTER 0
#define RESET_BIT_MODIFYING_OUTPUT_REGISTER 0
#define RESET_CAPTURE 0
#define RESET_DATA_WIDTH 1
#define RESET_DO_TEST_BENCH_WIRING 0
#define RESET_DRIVEN_SIM_VALUE 0
#define RESET_EDGE_TYPE NONE
#define RESET_FREQ 50000000
#define RESET_HAS_IN 1
#define RESET_HAS_OUT 0
#define RESET_HAS_TRI 0
#define RESET_IRQ_TYPE NONE
#define RESET_RESET_VALUE 0

/*
 * Macros for device 'sysid_qsys', class 'altera_avalon_sysid_qsys'
 * The macros are prefixed with 'SYSID_QSYS_'.
 * The prefix is the slave descriptor.
 */
#define SYSID_QSYS_COMPONENT_TYPE altera_avalon_sysid_qsys
#define SYSID_QSYS_COMPONENT_NAME sysid_qsys
#define SYSID_QSYS_BASE 0x10000
#define SYSID_QSYS_SPAN 8
#define SYSID_QSYS_END 0x10007
#define SYSID_QSYS_ID 2899645186
#define SYSID_QSYS_TIMESTAMP 1620741185

/*
 * Macros for device 'jtag_uart', class 'altera_avalon_jtag_uart'
 * The macros are prefixed with 'JTAG_UART_'.
 * The prefix is the slave descriptor.
 */
#define JTAG_UART_COMPONENT_TYPE altera_avalon_jtag_uart
#define JTAG_UART_COMPONENT_NAME jtag_uart
#define JTAG_UART_BASE 0x20000
#define JTAG_UART_SPAN 8
#define JTAG_UART_END 0x20007
#define JTAG_UART_IRQ 2
#define JTAG_UART_READ_DEPTH 64
#define JTAG_UART_READ_THRESHOLD 8
#define JTAG_UART_WRITE_DEPTH 64
#define JTAG_UART_WRITE_THRESHOLD 8


#endif /* _ALTERA_HPS_0_H_ */
